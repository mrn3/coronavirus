{"version":3,"sources":["images/png/background.png","images/png/coronavirus_logo.png","components/Menu.js","components/TopBar.js","components/Footer.js","components/Page.js","components/Home.js","components/ByCountry.js","components/ByState.js","components/Projections.js","components/DailyChanges.js","routes.js","components/MainContext.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","label","pathname","logo","require","useStyles","makeStyles","theme","appBar","boxShadow","backgroundColor","borderBottom","palette","grey","flex","display","breakpoints","down","justifyContent","alignItems","link","textDecoration","color","width","logoContainer","padding","iconContainer","iconButton","float","tabContainer","margin","paddingRight","tabItem","minWidth","TopBar","props","classes","useState","selectedTabIndex","setSelectedTabIndex","menuDrawer","setMenuDrawer","mobileMenuOpen","event","AppBar","position","className","Toolbar","Grid","container","spacing","item","xs","to","src","alt","noTabs","Fragment","IconButton","onClick","aria-label","SwipeableDrawer","anchor","open","onOpen","onClose","title","List","map","index","ListItem","component","Link","search","currentPath","button","key","ListItemText","primary","Tabs","value","filteredArray","split","Math","max","getCurrentParentPage","indicatorColor","textColor","onChange","Tab","styles","root","footerContainer","marginTop","linkArea","linkHeader","fontWeight","paddingBottom","bodyText","copyright","marginLeft","marginRight","Footer","sm","flexDirection","minHeight","grid","content","textAlign","text","secondary","backgroundGraphic","backgroundImage","Background","height","Page","contentWidth","contentBackgroundColor","style","CssBaseline","children","includeBackgroundGraphic","row","actionButton","textTransform","blockCenter","block","inlining","buttonBar","alignRight","formControl","noBorder","borderBottomStyle","loadingState","opacity","loadingMessage","top","left","fontFamily","fontSize","subtitle","Home","location","smallContainer","flexGrow","tableContainer","maxHeight","ByCountry","stats","setStats","React","page","setPage","rowsPerPage","setRowsPerPage","sortBy","setSortBy","cases","deaths","active","recovered","shown","setShown","handleCheckboxChange","target","name","checked","getIntegerFromPlusString","plusString","parseInt","substring","getStatObject","stat","returnObject","country","totalCases","total","newCases","new","priorDeaths","newDeaths","nonCriticalCases","critical","criticalCases","recoveredCases","sortAscending","rows","filter","sort","a","b","chartRows","slice","columns","id","req","unirest","headers","end","res","error","Error","body","response","push","useEffect","length","fetchData","FormGroup","FormControlLabel","control","Checkbox","FormControl","variant","InputLabel","Select","labelId","column","MenuItem","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","hover","role","tabIndex","format","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","aspect","data","layout","right","bottom","strokeDasharray","type","dataKey","stackId","fill","ByState","statArray","setStatArray","tableRowsPerPage","selectedDate","setSelectedDate","selectedState","setSelectedState","dateArray","returnDateArray","includes","date","reverse","getDateArray","stateArray","returnStateArray","state","getStateArray","getMaxDate","returnMaxDate","tableRows","Papa","parse","header","delimiter","deathRate","round","maxDate","handleRowClick","overflow","verticalAlign","Projections","casesPerDayLinear","deathsPerDayLinear","casesPerDayPercentage","deathsPerDayPercentage","casesLinearLabel","deathsLinearLabel","casesPercentageLabel","deathsPercentageLabel","projectLastDays","setProjectLastDays","projectFutureDays","setProjectFutureDays","casesLinear","casesPercentage","deathsLinear","deathsPercentage","handleShownChange","actualsLineChartRowArray","dateUnix","moment","unix","getActualsLineChartRowArray","projectionLineChartRowArray","returnProjectionLineChartRowArray","maxDateMoment","maxDateMinusMoment","subtract","projectionEndDate","add","maxDateCases","maxDateDeaths","maxDateMinusCases","maxDateMinusDeaths","isSame","m","isBefore","currentDate","getProjectionLineChartRowArray","lineChartRows","domain","tickFormatter","stroke","strokeWidth","dot","DailyChanges","currentCases","previousCases","currentDeaths","previousDeaths","casesDailyChange","deathsDailyChange","getLineChartRowArray","history","createBrowserHistory","listen","ReactGA","set","pageview","window","exact","path","useMainContext","createUseContext","activeStep","setActiveStep","scrollToTop","setTimeout","scrollTo","behavior","pathArray","loading","url","setUrl","urlInvalid","setUrlInvalid","industry","setIndustry","businessType","setBusinessType","businessSeasonality","setBusinessSeasonality","contactName","setContactName","contactEmail","setContactEmail","contactEmailInvalid","setContactEmailInvalid","revenueDialog","setRevenueDialog","closeRevenueDialog","annualRevenue","setAnnualRevenue","annualRevenueInvalid","setAnnualRevenueInvalid","handleAddProduct","setCurrentProductName","setCurrentProductPercentage","setCurrentProductRevenuePerTransaction","setCurrentProductProfitMargin","setCurrentProductQuantitySold","setCurrentProductCustomerType","setCurrentProductPurchaseTimes","setCurrentProductPurchaseInterval","setCurrentProductIndex","openRevenueDialog","productArray","setProductArray","currentProductIndex","currentProductName","currentProductPercentage","currentProductRevenuePerTransaction","currentProductRevenuePerTransactionInvalid","setCurrentProductRevenuePerTransactionInvalid","currentProductProfitMargin","currentProductProfitMarginInvalid","setCurrentProductProfitMarginInvalid","currentProductQuantitySold","currentProductQuantitySoldInvalid","setCurrentProductQuantitySoldInvalid","currentProductCustomerType","currentProductPurchaseTimes","currentProductPurchaseInterval","serviceDialog","setServiceDialog","closeServiceDialog","handleAddService","setCurrentServiceType","setCurrentServiceProviderName","setCurrentServiceProviderUrl","setCurrentServiceBillingPerMonth","setCurrentServiceStartedAt","setCurrentServiceRating","setCurrentServiceIndex","openServiceDialog","serviceArray","setServiceArray","currentServiceIndex","currentServiceType","currentServiceProviderName","currentServiceProviderUrl","currentServiceProviderUrlInvalid","setCurrentServiceProviderUrlInvalid","currentServiceBillingPerMonth","currentServiceBillingPerMonthInvalid","setCurrentServiceBillingPerMonthInvalid","currentServiceStartedAt","currentServiceStartedAtInvalid","setCurrentServiceStartedAtInvalid","currentServiceRating","timeline","setTimeline","handleNext","handleBack","handleUrlChange","handleUrlBlur","isValidUrl","test","String","toLowerCase","handleIndustryChange","selection","handleBusinessTypeChange","handleBusinessSeasonalityChange","handleContactNameChange","handleContactEmailChange","handleContactEmailBlur","isValidContactEmail","handleAnnualRevenueChange","handleAnnualRevenueBlur","trimmedAnnualRevenue","replace","trim","parsedAnnualRevenue","isNaN","Number","isInteger","handleDeleteProduct","idx","s","sidx","handleEditProduct","currentProduct","percentage","revenuePerTransaction","profitMargin","quantitySold","customerType","purchaseTimes","purchaseInterval","handleProductSubmit","newProduct","concat","newProductArray","handleCurrentProductNameChange","handleCurrentProductPercentageChange","handleCurrentProductRevenuePerTransactionChange","handleCurrentProductRevenuePerTransactionBlur","trimmedRevenuePerTransaction","parsedRevenuePerTransaction","handleCurrentProductProfitMarginChange","handleCurrentProductProfitMarginBlur","trimmedProfitMargin","parsedProfitMargin","handleCurrentProductQuantitySoldChange","handleCurrentProductQuantitySoldBlur","trimmedQuantitySold","parsedQuantitySold","handleCurrentProductCustomerTypeChange","handleCurrentProductPurchaseTimesChange","handleCurrentProductPurchaseIntervalChange","handleDeleteService","handleEditService","currentService","providerName","providerUrl","billingPerMonth","startedAt","rating","handleServiceSubmit","newService","newServiceArray","handleCurrentServiceTypeChange","handleCurrentServiceProviderNameChange","handleCurrentServiceProviderUrlChange","handleCurrentServiceProviderUrlBlur","isValidCurrentServiceProviderUrl","handleCurrentServiceBillingPerMonthChange","handleCurrentServiceBillingPerMonthBlur","handleCurrentServiceStartedAtChange","handleCurrentServiceStartedAtBlur","currentServiceStartedAtMoment","isValid","handleCurrentServiceRatingChange","handleTimelineChange","inTimeline","createMuiTheme","main","blue","indigo","typography","useNextVariants","join","App","Provider","ThemeProvider","Boolean","hostname","match","initialize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd1e3e4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.32f54de7.png\";","module.exports = __webpack_public_path__ + \"static/media/coronavirus_logo.f28de6c4.png\";","const Menu = [\n    {\n        label: \"Home\",\n        pathname: \"/coronavirus/\"\n    },\n    {\n        label: \"By Country\",\n        pathname: \"/coronavirus/by-country\"\n    },\n    {\n        label: \"By State\",\n        pathname: \"/coronavirus/by-state\"\n    },\n    {\n        label: \"Projections\",\n        pathname: \"/coronavirus/projections\"\n    },\n    {\n        label: \"Daily Changes\",\n        pathname: \"/coronavirus/daily-changes\"\n    }\n];\n\nexport default Menu;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Link } from 'react-router-dom';\nimport Menu from './Menu';\n\nimport Grid from '@material-ui/core/Grid';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nconst logo = require('../images/png/coronavirus_logo.png');\n\nconst useStyles = makeStyles(theme => ({\n\tappBar: {\n\t\tboxShadow: 'none',\n\t\tbackgroundColor: 'white',\n\t\tborderBottom: `1px solid ${theme.palette.grey['A100']}`,\n\t},\n\tflex: {\n\t\tdisplay: 'flex',\n\t\t[theme.breakpoints.down('sm')]: {\n\t\t\tdisplay: 'flex',\n\t\t\tjustifyContent: 'space-evenly',\n\t\t\talignItems: 'center'\n\t\t}\n\t},\n\tlink: {\n\t\ttextDecoration: 'none',\n\t\tcolor: 'inherit'\n\t},\n\tlogo: {\n\t\twidth: 220\n\t},\n\tlogoContainer: {\n\t\tpadding: 14\n\t},\n\ticonContainer: {\n\t\tdisplay: 'none',\n\t\t[theme.breakpoints.down('sm')]: {\n\t\t\tdisplay: 'block'\n\t\t}\n\t},\n\ticonButton: {\n\t\tfloat: 'right'\n\t},\n\ttabContainer: {\n\t\tmargin: 'auto',\n\t\tpaddingRight: 150,\n\t\t[theme.breakpoints.down('sm')]: {\n\t\t\tdisplay: 'none'\n\t\t}\n\t},\n\ttabItem: {\n\t\tminWidth: 'auto'\n\t}\n}));\n\nexport default function TopBar(props) {\n\tconst classes = useStyles();\n\tconst [selectedTabIndex, setSelectedTabIndex] = useState(0);\n\tconst [menuDrawer, setMenuDrawer] = useState(false);\n\n\tconst handleTabChange = (event, value) => {\n\t\tsetSelectedTabIndex(value);\n\t};\n\n\tconst mobileMenuOpen = (event) => {\n\t\tsetMenuDrawer(true);\n\t};\n\n\tconst mobileMenuClose = (event) => {\n\t\tsetMenuDrawer(false);\n\t};\n\n\tconst getCurrentParentPage = () => {\n\t\tlet filteredArray = Menu.map((item, index) => {\n\t\t\tlet currentPathParentPage = props.currentPath.split('/')[2];\n\t\t\tlet itemPathParentPage = item.pathname.split('/')[2];\n\t\t\tif (currentPathParentPage === itemPathParentPage) {\n\t\t\t\treturn index;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\treturn Math.max(...filteredArray);\n\t};\n\n\treturn (\n\t\t<AppBar position=\"relative\" color=\"default\" className={classes.appBar}>\n\t\t\t<Toolbar>\n\t\t\t\t<Grid container spacing={0} alignItems=\"baseline\">\n\t\t\t\t\t<Grid container item xs={12} className={classes.flex} alignItems=\"baseline\">\n\t\t\t\t\t\t<Link to='/' className={classes.link}>\n\t\t\t\t\t\t\t<div className={classes.logoContainer}>\n\t\t\t\t\t\t\t\t<img className={classes.logo} src={logo} alt=\"Coronavirus Statistics Logo\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t{!props.noTabs && (\n\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t<div className={classes.iconContainer}>\n\t\t\t\t\t\t\t\t\t<IconButton onClick={mobileMenuOpen} className={classes.iconButton} color=\"inherit\" aria-label=\"Menu\">\n\t\t\t\t\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className={classes.tabContainer}>\n\t\t\t\t\t\t\t\t\t<SwipeableDrawer anchor=\"right\" open={menuDrawer} onOpen={mobileMenuOpen} onClose={mobileMenuClose}>\n\t\t\t\t\t\t\t\t\t\t<AppBar title=\"Menu\" />\n\t\t\t\t\t\t\t\t\t\t<List>\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tMenu.map((item, index) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tto={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpathname: item.pathname,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsearch: props.currentPath\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbutton key={index}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemText primary={item.label} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t\t\t</SwipeableDrawer>\n\t\t\t\t\t\t\t\t\t<Tabs\n\t\t\t\t\t\t\t\t\t\tvalue={getCurrentParentPage() || selectedTabIndex}\n\t\t\t\t\t\t\t\t\t\tindicatorColor=\"primary\"\n\t\t\t\t\t\t\t\t\t\ttextColor=\"primary\"\n\t\t\t\t\t\t\t\t\t\tonChange={handleTabChange}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tMenu.map((item, index) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Tab key={index} component={Link}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tto={{ pathname: item.pathname }}\t//search: props.currentPath\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyles={{ root: classes.tabItem }} label={item.label} />\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Tabs>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t)\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles(theme => ({\n    footerContainer: {\n        backgroundColor: '#333',\n        width: '100%',\n        marginTop: 'auto',\n        padding: theme.spacing(2),\n    },\n    linkArea: {\n        padding: 70\n    },\n    linkHeader: {\n        fontWeight: 'bold',\n        color: '#eee',\n        paddingBottom: 10\n    },\n    link: {\n        textDecoration: 'none',\n        color: '#ccc'\n    },\n    bodyText: {\n        color: '#ccc'\n    },\n    copyright: {\n        color: '#ccc',\n        marginLeft: 'auto',\n        marginRight: 30\n    }\n}));\n\nexport default function Footer(props) {\n    const styles = useStyles();\n    return (\n        <div className={styles.footerContainer}>\n            <Grid container spacing={0} alignItems=\"baseline\">\n                <Grid container item xs={6} sm={3} className={styles.flex} alignItems=\"baseline\">\n                    <div className={styles.linkArea}>\n                        <div className={styles.linkHeader}>\n                            Bar Charts\n                        </div>\n                        <Link to='/coronavirus/by-country' className={styles.link}>\n                            By Country\n                        </Link>\n                        <br />\n                        <Link to='/coronavirus/by-state' className={styles.link}>\n                            By State\n                        </Link>\n                        <Link to='/coronavirus/daily-changes' className={styles.link}>\n                            Daily Changes\n                        </Link>\n                        <br />\n\n                    </div>\n                </Grid>\n                <Grid container item xs={6} sm={3} className={styles.flex} alignItems=\"baseline\">\n                    <div className={styles.linkArea}>\n                        <div className={styles.linkHeader}>\n                            Line Charts\n                        </div>\n                        <Link to='/coronavirus/projections' className={styles.link}>\n                            Projections\n                        </Link>\n                    </div>\n                </Grid>\n                <Grid container item xs={12} sm={6} className={styles.flex} alignItems=\"baseline\">\n                    <div className={styles.linkArea}>\n                        <div className={styles.linkHeader}>\n                            Coronavirus Statistics\n                        </div>\n                        <div className={styles.bodyText}>\n                            Coronavirus Statistics is a tool to help you analyze and understand the spread of the Coronavirus\n                            (COVID-19) disease in various countries of the world and states in the US.\n                        </div>\n                    </div>\n                    <div className={styles.copyright}>\n                        Copyright © 2020 Coronavirus Statistics\n                    </div>\n                </Grid>\n\n            </Grid>\n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TopBar from './TopBar';\nimport Footer from './Footer';\nimport Grid from '@material-ui/core/Grid';\nimport Background from '../images/png/background.png';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tminHeight: '100vh'\n\t},\n\tgrid: {\n\t\twidth: 1200,\n\t\tmarginTop: 40,\n\t\t[theme.breakpoints.down('sm')]: {\n\t\t\twidth: 'calc(100% - 20px)'\n\t\t}\n\t},\n\tcontent: {\n\t\tpadding: theme.spacing(3),\n\t\ttextAlign: 'left',\n\t\tmargin: 'auto',\n\t\tcolor: theme.palette.text.secondary,\n\t},\n\tbackgroundGraphic: {\n\t\tbackgroundImage: `url(${Background})`,\n\t\twidth: '100%',\n\t\theight: 700\n\t}\n}));\n\nexport default function Page(props) {\n\tconst styles = useStyles();\n\tlet contentWidth = props.contentWidth || 900;\n\tlet contentBackgroundColor = props.contentBackgroundColor || '#fff';\n    return (\n        <div className={styles.root} style={{backgroundColor: contentBackgroundColor}}>\n\t\t\t<CssBaseline />\n            <TopBar currentPath={props.currentPath} />\n\t\t\t<Grid container spacing={0}>\n\t\t\t\t<div style={{width: contentWidth}} className={styles.content}>\n\t\t\t\t\t{props.children}\n\t\t\t\t</div>\n            </Grid>\n\t\t\t{\n\t\t\t\tprops.includeBackgroundGraphic\n\t\t\t\t? <div className={styles.backgroundGraphic} />\n\t\t\t\t: <div><br /><br /></div>\n\t\t\t}\n            <Footer />\n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Page from './Page';\n\nconst useStyles = makeStyles(theme => ({\n\trow: {\n\t\tdisplay: 'flex',\n\t},\n\tactionButton: {\n\t\tfloat: 'right',\n\t\ttextTransform: 'uppercase',\n\t\tmargin: theme.spacing(1),\n\t\twidth: 152\n\t},\n\tblockCenter: {\n\t\tpadding: theme.spacing(2),\n\t\ttextAlign: 'center'\n\t},\n\tblock: {\n\t\tpadding: theme.spacing(2),\n\t},\n\tinlining: {\n\t\tdisplay: 'inline-block',\n\t\tmarginRight: 10\n\t},\n\tbuttonBar: {\n\t\tdisplay: 'flex'\n\t},\n\talignRight: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'flex-end'\n\t},\n\tformControl: {\n\t\tfloat: 'left',\n\t\twidth: \"100%\"\n\t},\n\tnoBorder: {\n\t\tborderBottomStyle: 'hidden'\n\t},\n\tloadingState: {\n\t\topacity: 0.05\n\t},\n\tloadingMessage: {\n\t\tposition: 'absolute',\n\t\ttop: '40%',\n\t\tleft: '40%'\n\t},\n\ttitle: {\n\t\tfontFamily: 'Arial Narrow',\n\t\tfontSize: 56,\n\t\tfontWeight: 900,\n\t\tcolor: '#E66464',\n\t\ttextTransform: 'uppercase'\n\t},\n\tsubtitle: {\n\t\tfontSize: 24,\n\t\tcolor: '#444',\n\t\tpadding: 20\n\t}\n}));\n\nexport default function Home(props) {\n\tconst currentPath = props.location.pathname;\n\tconst styles = useStyles();\n\n\treturn (\n\t\t<Page currentPath={currentPath} contentWidth={700} includeBackgroundGraphic={true}>\n\t\t\t<div className={styles.smallContainer}>\n\t\t\t\t<div className={styles.blockCenter}>\n\t\t\t\t\t<div className={styles.title}>\n\t\t\t\t\t\tWelcome To Coronavirus Statistics!\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={styles.subtitle}>\n\t\t\t\t\t\tUse the menu above to find all kinds of statistics \n\t\t\t\t\t\tabout Coronavirus (COVID-19).\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Page>\n\t)\n}","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport unirest from \"unirest\";\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer\n} from \"recharts\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Page from './Page';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        padding: 10\n    },\n    tableContainer: {\n        maxHeight: 640\n    },\n    formControl: {\n        minWidth: 120\n    },\n    title: {\n        fontFamily: 'Arial Narrow',\n        fontSize: 42,\n        fontWeight: 900,\n        color: '#E66464',\n        textTransform: 'uppercase'\n    },\n    subtitle: {\n        fontSize: 24,\n        color: '#444'\n    }\n}));\n\n\nconst ByCountry = (props) => {\n    const currentPath = props.location.pathname;\n    const [stats, setStats] = useState([]);\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [sortBy, setSortBy] = React.useState(\"totalCases\");\n    const [shown, setShown] = React.useState({\n        cases: true,\n        deaths: true,\n        active: true,\n        recovered: true\n    });\n\n    const handleCheckboxChange = event => {\n        setShown({ ...shown, [event.target.name]: event.target.checked });\n    };\n\n    const handleChange = event => {\n        setSortBy(event.target.value);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = event => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const getIntegerFromPlusString = plusString => {\n        return plusString ? parseInt(plusString.substring(1), 10) : 0;\n    };\n\n    const getStatObject = stat => {\n        let returnObject = {\n            name: stat.country,\n            totalCases: stat.cases.total,\n            newCases: getIntegerFromPlusString(stat.cases.new)\n        };\n        if (shown.deaths) {\n            returnObject.priorDeaths =\n                stat.deaths.total - getIntegerFromPlusString(stat.deaths.new);\n            returnObject.newDeaths = getIntegerFromPlusString(stat.deaths.new);\n        }\n        if (shown.active) {\n            returnObject.nonCriticalCases = stat.cases.active - stat.cases.critical;\n            returnObject.criticalCases = stat.cases.critical;\n        }\n        if (shown.recovered) {\n            returnObject.recoveredCases = stat.cases.recovered;\n        }\n        return returnObject;\n    };\n\n    const sortAscending = sortBy === 'name' ? -1 : 1;\n\n    const rows = stats\n        .filter(stat => stat.country !== 'World')\n        .map(stat => {\n            return getStatObject(stat);\n        })\n        .sort((a, b) => (a[sortBy] < b[sortBy] ? 1 * sortAscending : -1 * sortAscending));\n\n    //just get top 10\n    const chartRows = stats\n        .slice(0, 10)\n        .filter(stat => stat.country !== 'World' && stat.country !== 'All')\n        .map(stat => {\n            return getStatObject(stat);\n        })\n        .sort((a, b) => (a[sortBy] < b[sortBy] ? 1 * sortAscending : -1 * sortAscending));\n\n    const columns = [{ id: \"name\", label: \"Country\", minWidth: 100 }];\n    columns.push({ id: \"totalCases\", label: \"Total Cases\", minWidth: 60 });\n    columns.push({ id: \"newCases\", label: \"New Cases\", minWidth: 50 });\n    if (shown.deaths) {\n        columns.push({ id: \"newDeaths\", label: \"New Deaths\", minWidth: 50 });\n        columns.push({ id: \"priorDeaths\", label: \"Prior Deaths\", minWidth: 50 });\n    }\n    if (shown.active) {\n        columns.push({\n            id: \"criticalCases\",\n            label: \"Critical Cases\",\n            minWidth: 60\n        });\n        columns.push({\n            id: \"nonCriticalCases\",\n            label: \"Non-Critical Cases\",\n            minWidth: 60\n        });\n    }\n    if (shown.recovered) {\n        columns.push({\n            id: \"recoveredCases\",\n            label: \"Recovered Cases\",\n            minWidth: 60\n        });\n    }\n\n    async function fetchData() {\n        let req = unirest(\"GET\", \"https://covid-193.p.rapidapi.com/statistics\");\n\n        req.headers({\n            \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"4d6ca13f5fmsh9f19a8a950f47fbp1f836ajsn3031c33b0005\"\n        });\n\n        req.end(res => {\n            if (res.error) throw new Error(res.error);\n            setStats(res.body.response);\n        });\n    }\n\n    useEffect(() => {\n        if (stats.length < 1) {\n            fetchData();\n        }\n    });\n\n    return (\n        <Page currentPath={currentPath} contentWidth={1600} includeBackgroundGraphic={false}>\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12} sm={6}>\n                                Show:\n                                <FormGroup row>\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox\n                                                checked={shown.deaths}\n                                                onChange={handleCheckboxChange}\n                                                name=\"deaths\"\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"Deaths\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox\n                                                checked={shown.active}\n                                                onChange={handleCheckboxChange}\n                                                name=\"active\"\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"Active\"\n                                    />\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox\n                                                checked={shown.recovered}\n                                                onChange={handleCheckboxChange}\n                                                name=\"recovered\"\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"Recovered\"\n                                    />\n                                </FormGroup>\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <InputLabel id=\"sortBy\">Sort By</InputLabel>\n                                    <Select\n                                        labelId=\"sortBy\"\n                                        id=\"sortBy\"\n                                        value={sortBy}\n                                        onChange={handleChange}\n                                        label=\"Sort By\"\n                                    >\n                                        {columns.map(column => (\n                                            <MenuItem key={column.id} value={column.id}>\n                                                {column.label}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                        </Grid>\n\n                        <Paper>\n                            <TableContainer className={classes.tableContainer}>\n                                <Table stickyHeader aria-label=\"sticky table\">\n                                    <TableHead>\n                                        <TableRow>\n                                            {columns.map(column => (\n                                                <TableCell\n                                                    key={column.id}\n                                                    align={column.align}\n                                                    style={{ minWidth: column.minWidth }}\n                                                >\n                                                    {column.label}\n                                                </TableCell>\n                                            ))}\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {rows\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            .map(row => {\n                                                return (\n                                                    <TableRow\n                                                        hover\n                                                        role=\"checkbox\"\n                                                        tabIndex={-1}\n                                                        key={row.name}\n                                                    >\n                                                        {columns.map(column => {\n                                                            const value = row[column.id];\n                                                            return (\n                                                                <TableCell key={column.id} align={column.align}>\n                                                                    {column.format && typeof value === \"number\"\n                                                                        ? column.format(value)\n                                                                        : value}\n                                                                </TableCell>\n                                                            );\n                                                        })}\n                                                    </TableRow>\n                                                );\n                                            })}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                rowsPerPageOptions={[10, 25, 100]}\n                                component=\"div\"\n                                count={rows.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                            />\n                        </Paper>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                        <ResponsiveContainer width=\"100%\" aspect={4.0 / 4.0}>\n                            <BarChart\n                                data={chartRows}\n                                layout=\"vertical\"\n                                margin={{\n                                    top: 5,\n                                    right: 30,\n                                    left: 40,\n                                    bottom: 5\n                                }}\n                            >\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis type=\"number\" />\n                                <YAxis type=\"category\" dataKey=\"name\" />\n                                <Tooltip />\n                                <Legend />\n                                <Bar\n                                    dataKey=\"newDeaths\"\n                                    name=\"New Deaths\"\n                                    stackId=\"1\"\n                                    fill=\"#e33\"\n                                />\n                                <Bar\n                                    dataKey=\"priorDeaths\"\n                                    name=\"Prior Deaths\"\n                                    stackId=\"1\"\n                                    fill=\"#f51\"\n                                />\n                                <Bar\n                                    dataKey=\"criticalCases\"\n                                    name=\"Critical Cases\"\n                                    stackId=\"1\"\n                                    fill=\"#f80\"\n                                />\n                                <Bar\n                                    dataKey=\"nonCriticalCases\"\n                                    name=\"Non-Critical Cases\"\n                                    stackId=\"1\"\n                                    fill=\"#fd3\"\n                                />\n                                <Bar\n                                    dataKey=\"recoveredCases\"\n                                    name=\"Recovered\"\n                                    stackId=\"1\"\n                                    fill=\"#7b4\"\n                                />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </Grid>\n                </Grid>\n            </div>\n        </Page>\n    );\n};\n\nexport default ByCountry;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport unirest from \"unirest\";\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from \"recharts\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Papa from \"papaparse\";\nimport Page from './Page';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        padding: 10\n    },\n    tableContainer: {\n        maxHeight: 640\n    },\n    formControl: {\n        minWidth: 120\n    },\n    title: {\n        fontFamily: 'Arial Narrow',\n        fontSize: 42,\n        fontWeight: 900,\n        color: '#E66464',\n        textTransform: 'uppercase'\n    },\n    subtitle: {\n        fontSize: 24,\n        color: '#444'\n    }\n}));\n\n\nconst ByState = (props) => {\n    const currentPath = props.location.pathname;\n    const [statArray, setStatArray] = useState([]);\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [tableRowsPerPage, setRowsPerPage] = React.useState(10);\n    const [sortBy, setSortBy] = React.useState(\"cases\");\n    const [selectedDate, setSelectedDate] = React.useState(\"\");\n    const [selectedState, setSelectedState] = React.useState(\"All\");\n\n    const getDateArray = statArray => {\n        let returnDateArray = [];\n        for (let stat of statArray) {\n            if (!returnDateArray.includes(stat.date)) {\n                returnDateArray.push(stat.date);\n            }\n        }\n        returnDateArray.sort();\n        returnDateArray.reverse();\n        return returnDateArray;\n    };\n    const dateArray = getDateArray(statArray);\n\n    const getStateArray = statArray => {\n        let returnStateArray = [];\n        for (let stat of statArray) {\n            if (!returnStateArray.includes(stat.state)) {\n                returnStateArray.push(stat.state);\n            }\n        }\n        returnStateArray.sort();\n        return returnStateArray;\n    };\n    const stateArray = getStateArray(statArray);\n\n    const getMaxDate = statArray => {\n        let returnMaxDate = \"\";\n        if (statArray && statArray.length) {\n            for (let stat of statArray) {\n                if (stat.date > returnMaxDate) {\n                    returnMaxDate = stat.date;\n                }\n            }\n        }\n        return returnMaxDate;\n    };\n\n    const handleSelectedStateChange = event => {\n        setSelectedState(event.target.value);\n    };\n\n    const handleSelectedDateChange = event => {\n        setSelectedDate(event.target.value);\n    };\n\n    const handleSortByChange = event => {\n        setSortBy(event.target.value);\n    };\n\n    const handleRowClick = row => {\n        setSelectedState(row.state);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = event => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const sortAscending = sortBy === \"state\" ? -1 : 1;\n\n    const tableRows = statArray\n        .filter(stat => selectedState === stat.state || selectedState === \"All\")\n        .filter(stat => selectedDate === stat.date)\n        .sort((a, b) =>\n            a[sortBy] < b[sortBy] ? 1 * sortAscending : -1 * sortAscending\n        );\n\n    //just get top 10\n    const chartRows = statArray\n        .filter(stat => selectedState === stat.state || selectedState === \"All\")\n        .filter(stat => selectedDate === stat.date)\n        .sort((a, b) =>\n            a[sortBy] < b[sortBy] ? 1 * sortAscending : -1 * sortAscending\n        );\n    //.slice(0, 40);\n\n    const columns = [\n        { id: \"state\", label: \"State\", minWidth: 100 },\n        { id: \"date\", label: \"Date\", minWidth: 50 },\n        { id: \"cases\", label: \"Cases\", minWidth: 60 },\n        { id: \"deaths\", label: \"Deaths\", minWidth: 60 },\n        { id: \"deathRate\", label: \"Death Rate %\", minWidth: 60 }\n    ];\n\n    async function fetchData() {\n        let req = unirest(\n            \"GET\",\n            \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\"\n        );\n\n        req.end(res => {\n            if (res.error) throw new Error(res.error);\n            const parsedResults = Papa.parse(res.body, {\n                header: true,\n                delimiter: \",\"\n            });\n            let statArray = parsedResults.data.map(stat => {\n                return {\n                    state: stat.state,\n                    date: stat.date,\n                    cases: parseInt(stat.cases, 10),\n                    deaths: parseInt(stat.deaths, 10),\n                    deathRate:\n                        Math.round(\n                            (parseInt(stat.deaths, 10) / parseInt(stat.cases, 10)) * 10000\n                        ) / 100\n                };\n            });\n            let maxDate = getMaxDate(statArray);\n            setSelectedDate(maxDate);\n            setStatArray(statArray);\n        });\n    }\n\n    useEffect(() => {\n        if (statArray.length < 1) {\n            fetchData();\n        }\n    });\n\n    return (\n        <Page currentPath={currentPath} contentWidth={1600} includeBackgroundGraphic={false}>\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12} sm={4}>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <InputLabel id=\"selectedState\">State</InputLabel>\n                                    <Select\n                                        labelId=\"selectedState\"\n                                        id=\"selectedState\"\n                                        value={selectedState}\n                                        onChange={handleSelectedStateChange}\n                                        label=\"State\"\n                                    >\n                                        <MenuItem key=\"All\" value=\"All\">\n                                            All\n                                        </MenuItem>\n                                        {stateArray.map(state => (\n                                            <MenuItem key={state} value={state}>\n                                                {state}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12} sm={4}>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <InputLabel id=\"selectedDate\">Date</InputLabel>\n                                    <Select\n                                        labelId=\"selectedDate\"\n                                        id=\"selectedDate\"\n                                        value={selectedDate}\n                                        onChange={handleSelectedDateChange}\n                                        label=\"Date\"\n                                    >\n                                        {dateArray.map(date => (\n                                            <MenuItem key={date} value={date}>\n                                                {date}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12} sm={4}>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <InputLabel id=\"sortBy\">Sort By</InputLabel>\n                                    <Select\n                                        labelId=\"sortBy\"\n                                        id=\"sortBy\"\n                                        value={sortBy}\n                                        onChange={handleSortByChange}\n                                        label=\"Sort By\"\n                                    >\n                                        {columns\n                                            .filter(column => column.id !== \"date\")\n                                            .map(column => (\n                                                <MenuItem key={column.id} value={column.id}>\n                                                    {column.label}\n                                                </MenuItem>\n                                            ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                        </Grid>\n                        <Paper>\n                            <TableContainer className={classes.tableContainer}>\n                                <Table stickyHeader aria-label=\"sticky table\">\n                                    <TableHead>\n                                        <TableRow>\n                                            {columns.map(column => (\n                                                <TableCell\n                                                    key={column.id}\n                                                    align={column.align}\n                                                    style={{ minWidth: column.minWidth }}\n                                                >\n                                                    {column.label}\n                                                </TableCell>\n                                            ))}\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {tableRows\n                                            .slice(\n                                                page * tableRowsPerPage,\n                                                page * tableRowsPerPage + tableRowsPerPage\n                                            )\n                                            .map(row => {\n                                                return (\n                                                    <TableRow\n                                                        hover\n                                                        role=\"checkbox\"\n                                                        tabIndex={-1}\n                                                        key={row.state}\n                                                        onClick={() => {\n                                                            handleRowClick(row);\n                                                        }}\n                                                    >\n                                                        {columns.map(column => {\n                                                            const value = row[column.id];\n                                                            return (\n                                                                <TableCell key={column.id} align={column.align}>\n                                                                    {column.format && typeof value === \"number\"\n                                                                        ? column.format(value)\n                                                                        : value}\n                                                                </TableCell>\n                                                            );\n                                                        })}\n                                                    </TableRow>\n                                                );\n                                            })}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                rowsPerPageOptions={[10, 25, 100]}\n                                component=\"div\"\n                                count={tableRows.length}\n                                rowsPerPage={tableRowsPerPage}\n                                page={page}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                            />\n                        </Paper>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6} style={{ overflow: \"scroll\", height: 800 }}>\n                        <ResponsiveContainer width=\"100%\" aspect={4.0 / 10.0}>\n                            <BarChart\n                                data={chartRows}\n                                layout=\"vertical\"\n                                margin={{\n                                    top: 5,\n                                    right: 30,\n                                    left: 60,\n                                    bottom: 5\n                                }}\n                            >\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis type=\"number\" />\n                                <YAxis type=\"category\" dataKey=\"state\" />\n                                <Tooltip />\n                                <Legend\n                                    layout=\"horizontal\"\n                                    verticalAlign=\"top\"\n                                    align=\"center\"\n                                />\n                                <Bar dataKey=\"deaths\" name=\"Deaths\" stackId=\"1\" fill=\"#f51\" />\n                                <Bar dataKey=\"cases\" name=\"Cases\" stackId=\"1\" fill=\"#fd3\" />\n                            </BarChart>\n                        </ResponsiveContainer>\n\n                    </Grid>\n                </Grid>\n            </div>\n        </Page>\n    );\n};\n\nexport default ByState;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport unirest from \"unirest\";\nimport moment from \"moment\";\nimport {\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n    LineChart,\n    Line\n} from \"recharts\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Papa from \"papaparse\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Page from './Page';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        padding: 10\n    },\n    tableContainer: {\n        maxHeight: 640\n    },\n    formControl: {\n        minWidth: 120\n    },\n    title: {\n        fontFamily: 'Arial Narrow',\n        fontSize: 42,\n        fontWeight: 900,\n        color: '#E66464',\n        textTransform: 'uppercase'\n    },\n    subtitle: {\n        fontSize: 24,\n        color: '#444'\n    }\n}));\n\n\nconst Projections = (props) => {\n    const currentPath = props.location.pathname;\n    const [statArray, setStatArray] = useState([]);\n    const classes = useStyles();\n    const [selectedState, setSelectedState] = React.useState(\"Alabama\");\n    const [projectLastDays, setProjectLastDays] = React.useState(7);\n    const [projectFutureDays, setProjectFutureDays] = React.useState(7);\n    const [shown, setShown] = React.useState({\n        cases: true,\n        casesLinear: true,\n        casesPercentage: true,\n        deaths: false,\n        deathsLinear: false,\n        deathsPercentage: false\n    });\n\n    const getStateArray = statArray => {\n        let returnStateArray = [];\n        for (let stat of statArray) {\n            if (!returnStateArray.includes(stat.state)) {\n                returnStateArray.push(stat.state);\n            }\n        }\n        returnStateArray.sort();\n        return returnStateArray;\n    };\n    const stateArray = getStateArray(statArray);\n\n    const getMaxDate = statArray => {\n        let returnMaxDate = \"\";\n        if (statArray && statArray.length) {\n            for (let stat of statArray) {\n                if (stat.date > returnMaxDate) {\n                    returnMaxDate = stat.date;\n                }\n            }\n        }\n        return returnMaxDate;\n    };\n\n    const handleShownChange = event => {\n        setShown({ ...shown, [event.target.name]: event.target.checked });\n    };\n\n    const handleProjectLastDaysChange = event => {\n        setProjectLastDays(event.target.value);\n    };\n\n    const handleProjectFutureDaysChange = event => {\n        setProjectFutureDays(event.target.value);\n    };\n\n    const handleSelectedStateChange = event => {\n        setSelectedState(event.target.value);\n    };\n\n    const getActualsLineChartRowArray = statArray => {\n        return statArray\n            .filter(stat => stat.state === selectedState)\n            .map(stat => {\n                return {\n                    state: stat.state,\n                    date: stat.date,\n                    dateUnix: moment(stat.date).unix(),\n                    cases: stat.cases,\n                    deaths: stat.deaths\n                };\n            })\n            .sort((a, b) => (a.date < b.date ? -1 : 1));\n    };\n    const actualsLineChartRowArray = getActualsLineChartRowArray(statArray);\n\n    let casesPerDayLinear;\n    let deathsPerDayLinear;\n    let casesPerDayPercentage;\n    let deathsPerDayPercentage;\n\n    let casesLinearLabel;\n    let deathsLinearLabel;\n    let casesPercentageLabel;\n    let deathsPercentageLabel;\n\n    const getProjectionLineChartRowArray = statArray => {\n        let returnProjectionLineChartRowArray = [];\n        if (selectedState !== \"All\") {\n            let maxDate = getMaxDate(statArray);\n            let maxDateMoment = moment(maxDate);\n            let maxDateMinusMoment = moment(maxDateMoment).subtract(\n                projectLastDays,\n                \"days\"\n            );\n\n            let projectionEndDate = moment()\n                .add(projectFutureDays, \"days\")\n                .format(\"YYYY-MM-DD\");\n\n            //get the start and end values to calculate slope\n            let maxDateCases = 0;\n            let maxDateDeaths = 0;\n            let maxDateMinusCases = 0;\n            let maxDateMinusDeaths = 0;\n            for (let stat of statArray) {\n                if (stat.state === selectedState) {\n                    if (maxDateMoment.isSame(stat.date)) {\n                        maxDateCases = stat.cases;\n                        maxDateDeaths = stat.deaths;\n                    } else if (maxDateMinusMoment.isSame(stat.date)) {\n                        maxDateMinusCases = stat.cases;\n                        maxDateMinusDeaths = stat.deaths;\n                    }\n                }\n            }\n            casesPerDayLinear = Math.round(\n                (maxDateCases - maxDateMinusCases) / projectLastDays\n            );\n            deathsPerDayLinear = Math.round(\n                (maxDateDeaths - maxDateMinusDeaths) / projectLastDays\n            );\n            casesPerDayPercentage =\n                1 +\n                (maxDateCases - maxDateMinusCases) /\n                (maxDateMinusCases || 1) /\n                projectLastDays;\n            deathsPerDayPercentage =\n                1 +\n                (maxDateDeaths - maxDateMinusDeaths) /\n                (maxDateMinusDeaths || 1) /\n                projectLastDays;\n\n            casesLinearLabel = `Projected Cases Linear (${casesPerDayLinear}/day)`;\n            deathsLinearLabel = `Projected Deaths Linear (${deathsPerDayLinear}/day)`;\n            casesPercentageLabel = `Projected Cases Percentage (${Math.round(\n                (casesPerDayPercentage - 1) * 100\n            )}%/day)`;\n            deathsPercentageLabel = `Projected Deaths Percentage (${Math.round(\n                (deathsPerDayPercentage - 1) * 100\n            )}%/day)`;\n\n            //loop through dates\n            let casesLinear = maxDateCases;\n            let casesPercentage = maxDateCases;\n            let deathsLinear = maxDateDeaths;\n            let deathsPercentage = maxDateDeaths;\n            for (\n                let m = moment(maxDateMoment);\n                m.isBefore(projectionEndDate, \"day\");\n                m.add(1, \"days\")\n            ) {\n                let currentDate = m.format(\"YYYY-MM-DD\");\n                returnProjectionLineChartRowArray.push({\n                    state: selectedState,\n                    date: currentDate,\n                    dateUnix: moment(currentDate).unix(),\n                    casesLinear,\n                    casesPercentage,\n                    deathsLinear,\n                    deathsPercentage\n                });\n\n                //increment last\n                casesLinear += casesPerDayLinear;\n                deathsLinear += deathsPerDayLinear;\n                casesPercentage = Math.round(casesPercentage * casesPerDayPercentage);\n                deathsPercentage = Math.round(\n                    deathsPercentage * deathsPerDayPercentage\n                );\n            }\n        }\n        return returnProjectionLineChartRowArray;\n    };\n    const projectionLineChartRowArray = getProjectionLineChartRowArray(statArray);\n\n    const lineChartRows = [\n        ...actualsLineChartRowArray,\n        ...projectionLineChartRowArray\n    ];\n\n    async function fetchData() {\n        let req = unirest(\n            \"GET\",\n            \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\"\n        );\n\n        req.end(res => {\n            if (res.error) throw new Error(res.error);\n            const parsedResults = Papa.parse(res.body, {\n                header: true,\n                delimiter: \",\"\n            });\n            let statArray = parsedResults.data.map(stat => {\n                return {\n                    state: stat.state,\n                    date: stat.date,\n                    cases: parseInt(stat.cases, 10),\n                    deaths: parseInt(stat.deaths, 10),\n                    deathRate:\n                        Math.round(\n                            (parseInt(stat.deaths, 10) / parseInt(stat.cases, 10)) * 10000\n                        ) / 100\n                };\n            });\n            setStatArray(statArray);\n        });\n    }\n\n    useEffect(() => {\n        if (statArray.length < 1) {\n            fetchData();\n        }\n    });\n\n    return (\n        <Page currentPath={currentPath} contentWidth={1600} includeBackgroundGraphic={false}>\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={3}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <InputLabel id=\"selectedState\">State</InputLabel>\n                                    <Select\n                                        labelId=\"selectedState\"\n                                        id=\"selectedState\"\n                                        value={selectedState}\n                                        onChange={handleSelectedStateChange}\n                                        label=\"State\"\n                                    >\n                                        <MenuItem key=\"All\" value=\"All\">\n                                            All\n                                        </MenuItem>\n                                        {stateArray.map(state => (\n                                            <MenuItem key={state} value={state}>\n                                                {state}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <h3>Projection Based On Last</h3>\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\n                                <InputLabel id=\"projectLastDays\">Number of Days</InputLabel>\n                                <Select\n                                    labelId=\"projectLastDays\"\n                                    id=\"projectLastDays\"\n                                    value={projectLastDays}\n                                    onChange={handleProjectLastDaysChange}\n                                    label=\"Number Of Days\"\n                                >\n                                    <MenuItem key={1} value={1}>\n                                        1\n                    </MenuItem>\n                                    <MenuItem key={2} value={2}>\n                                        2\n                    </MenuItem>\n                                    <MenuItem key={3} value={3}>\n                                        3\n                    </MenuItem>\n                                    <MenuItem key={4} value={4}>\n                                        4\n                    </MenuItem>\n                                    <MenuItem key={5} value={5}>\n                                        5\n                    </MenuItem>\n                                    <MenuItem key={6} value={6}>\n                                        6\n                    </MenuItem>\n                                    <MenuItem key={7} value={7}>\n                                        7\n                    </MenuItem>\n                                    <MenuItem key={10} value={10}>\n                                        10\n                    </MenuItem>\n                                    <MenuItem key={14} value={14}>\n                                        14\n                    </MenuItem>\n                                    <MenuItem key={30} value={30}>\n                                        30\n                    </MenuItem>\n                                    <MenuItem key={60} value={60}>\n                                        60\n                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <h3>Project Out Into Future</h3>\n                            <FormControl variant=\"outlined\" className={classes.formControl}>\n                                <InputLabel id=\"projectFutureDays\">Number of Days</InputLabel>\n                                <Select\n                                    labelId=\"projectFutureDays\"\n                                    id=\"projectFutureDays\"\n                                    value={projectFutureDays}\n                                    onChange={handleProjectFutureDaysChange}\n                                    label=\"Number Of Days\"\n                                >\n                                    <MenuItem key={1} value={1}>\n                                        1\n                    </MenuItem>\n                                    <MenuItem key={2} value={2}>\n                                        2\n                    </MenuItem>\n                                    <MenuItem key={3} value={3}>\n                                        3\n                    </MenuItem>\n                                    <MenuItem key={4} value={4}>\n                                        4\n                    </MenuItem>\n                                    <MenuItem key={5} value={5}>\n                                        5\n                    </MenuItem>\n                                    <MenuItem key={6} value={6}>\n                                        6\n                    </MenuItem>\n                                    <MenuItem key={7} value={7}>\n                                        7\n                    </MenuItem>\n                                    <MenuItem key={10} value={10}>\n                                        10\n                    </MenuItem>\n                                    <MenuItem key={14} value={14}>\n                                        14\n                    </MenuItem>\n                                    <MenuItem key={30} value={30}>\n                                        30\n                    </MenuItem>\n                                    <MenuItem key={60} value={60}>\n                                        60\n                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <h2>Show</h2>\n                        <Grid item xs={12}>\n\n                            <h3>Cases</h3>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.cases}\n                                        onChange={handleShownChange}\n                                        name=\"cases\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Actual Cases\"\n                            />\n                            <br />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.casesLinear}\n                                        onChange={handleShownChange}\n                                        name=\"casesLinear\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label={casesLinearLabel}\n                            />\n                            <br />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.casesPercentage}\n                                        onChange={handleShownChange}\n                                        name=\"casesPercentage\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label={casesPercentageLabel}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <h3>Deaths</h3>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.deaths}\n                                        onChange={handleShownChange}\n                                        name=\"deaths\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Actual Deaths\"\n                            />\n                            <br />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.deathsLinear}\n                                        onChange={handleShownChange}\n                                        name=\"deathsLinear\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label={deathsLinearLabel}\n                            />\n                            <br />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.deathsPercentage}\n                                        onChange={handleShownChange}\n                                        name=\"deathsPercentage\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label={deathsPercentageLabel}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <Grid item xs={12} sm={9} style={{ overflow: \"scroll\", height: 800 }}>\n\n                        <Grid container spacing={3}>\n\n                            <Grid item xs={12} sm={12}>\n                                <ResponsiveContainer width=\"100%\" aspect={15.0 / 9.0}>\n                                    <LineChart\n                                        data={lineChartRows}\n                                        margin={{\n                                            top: 5,\n                                            right: 30,\n                                            left: 20,\n                                            bottom: 5\n                                        }}\n                                    >\n                                        <XAxis\n                                            dataKey=\"dateUnix\"\n                                            domain={[\"auto\", \"auto\"]}\n                                            name=\"Date\"\n                                            tickFormatter={dateUnix =>\n                                                moment.unix(dateUnix).format(\"YYYY-MM-DD\")\n                                            }\n                                            type=\"number\"\n                                        />\n                                        <YAxis />\n                                        <Tooltip />\n                                        <Legend\n                                            layout=\"horizontal\"\n                                            verticalAlign=\"top\"\n                                            align=\"center\"\n                                        />\n\n                                        {shown.cases && (\n                                            <Line\n                                                name=\"Actual Cases\"\n                                                type=\"monotone\"\n                                                dataKey=\"cases\"\n                                                stroke=\"#f80\"\n                                                strokeWidth={2}\n                                                dot={<div></div>}\n                                            />\n                                        )}\n\n                                        {shown.casesLinear && (\n                                            <Line\n                                                name={casesLinearLabel}\n                                                type=\"monotone\"\n                                                dataKey=\"casesLinear\"\n                                                strokeDasharray=\"5 5\"\n                                                stroke=\"#f80\"\n                                                strokeWidth={2}\n                                                dot={<div></div>}\n                                            />\n                                        )}\n                                        {shown.casesPercentage && (\n                                            <Line\n                                                name={casesPercentageLabel}\n                                                type=\"monotone\"\n                                                dataKey=\"casesPercentage\"\n                                                strokeDasharray=\"5 5\"\n                                                stroke=\"#f80\"\n                                                strokeWidth={2}\n                                                dot={<div></div>}\n                                            />\n                                        )}\n                                        {shown.deaths && (\n                                            <Line\n                                                name=\"Actual Deaths\"\n                                                type=\"monotone\"\n                                                dataKey=\"deaths\"\n                                                stroke=\"#e33\"\n                                                strokeWidth={2}\n                                                dot={<div></div>}\n                                            />\n                                        )}\n                                        {shown.deathsLinear && (\n                                            <Line\n                                                name={deathsLinearLabel}\n                                                type=\"monotone\"\n                                                dataKey=\"deathsLinear\"\n                                                stroke=\"#e33\"\n                                                strokeDasharray=\"5 5\"\n                                                strokeWidth={2}\n                                                dot={<div></div>}\n                                            />\n                                        )}\n\n                                        {shown.deathsPercentage && (\n                                            <Line\n                                                name={deathsPercentageLabel}\n                                                type=\"monotone\"\n                                                dataKey=\"deathsPercentage\"\n                                                stroke=\"#e33\"\n                                                strokeDasharray=\"5 5\"\n                                                strokeWidth={2}\n                                                dot={<div></div>}\n                                            />\n                                        )}\n                                    </LineChart>\n                                </ResponsiveContainer>\n                            </Grid>\n                        </Grid>\n\n                    </Grid>\n                </Grid>\n            </div>\n        </Page>\n    );\n};\n\nexport default Projections;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport unirest from \"unirest\";\nimport moment from \"moment\";\nimport {\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n    CartesianGrid,\n    BarChart,\n    Bar\n} from \"recharts\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Papa from \"papaparse\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Page from './Page';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        padding: 10\n    },\n    tableContainer: {\n        maxHeight: 640\n    },\n    formControl: {\n        minWidth: 120\n    },\n    title: {\n        fontFamily: 'Arial Narrow',\n        fontSize: 42,\n        fontWeight: 900,\n        color: '#E66464',\n        textTransform: 'uppercase'\n    },\n    subtitle: {\n        fontSize: 24,\n        color: '#444'\n    }\n}));\n\n\nconst DailyChanges = (props) => {\n    const currentPath = props.location.pathname;\n    const [statArray, setStatArray] = useState([]);\n    const classes = useStyles();\n    const [selectedState, setSelectedState] = React.useState(\"Alabama\");\n    const [shown, setShown] = React.useState({\n        cases: true,\n        casesLinear: true,\n        casesPercentage: true,\n        deaths: false,\n        deathsLinear: false,\n        deathsPercentage: false\n    });\n\n    const getStateArray = statArray => {\n        let returnStateArray = [];\n        for (let stat of statArray) {\n            if (!returnStateArray.includes(stat.state)) {\n                returnStateArray.push(stat.state);\n            }\n        }\n        returnStateArray.sort();\n        return returnStateArray;\n    };\n    const stateArray = getStateArray(statArray);\n\n    const handleShownChange = event => {\n        setShown({ ...shown, [event.target.name]: event.target.checked });\n    };\n\n    const handleSelectedStateChange = event => {\n        setSelectedState(event.target.value);\n    };\n\n    const getLineChartRowArray = statArray => {\n        let currentCases = 0;\n        let previousCases = 0;\n        let currentDeaths = 0;\n        let previousDeaths = 0;\n        return statArray\n            .filter(stat => stat.state === selectedState)\n            .map(stat => {\n                currentCases = stat.cases;\n                currentDeaths = stat.deaths;\n                let returnObject = {\n                    state: stat.state,\n                    date: stat.date,\n                    dateUnix: moment(stat.date).unix(),\n                    cases: stat.cases,\n                    casesDailyChange: currentCases - previousCases,\n                    deaths: stat.deaths,\n                    deathsDailyChange: currentDeaths - previousDeaths,\n                };\n                previousCases = currentCases;\n                previousDeaths = currentDeaths;\n                return returnObject;\n            })\n            .sort((a, b) => (a.date < b.date ? -1 : 1));\n    };\n    const lineChartRows = getLineChartRowArray(statArray);\n\n    async function fetchData() {\n        let req = unirest(\n            \"GET\",\n            \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\"\n        );\n\n        req.end(res => {\n            if (res.error) throw new Error(res.error);\n            const parsedResults = Papa.parse(res.body, {\n                header: true,\n                delimiter: \",\"\n            });\n            let statArray = parsedResults.data.map(stat => {\n                return {\n                    state: stat.state,\n                    date: stat.date,\n                    cases: parseInt(stat.cases, 10),\n                    deaths: parseInt(stat.deaths, 10),\n                    deathRate:\n                        Math.round(\n                            (parseInt(stat.deaths, 10) / parseInt(stat.cases, 10)) * 10000\n                        ) / 100\n                };\n            });\n            setStatArray(statArray);\n        });\n    }\n\n    useEffect(() => {\n        if (statArray.length < 1) {\n            fetchData();\n        }\n    });\n\n    return (\n        <Page currentPath={currentPath} contentWidth={1600} includeBackgroundGraphic={false}>\n            <div className={classes.root}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} sm={2}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <InputLabel id=\"selectedState\">State</InputLabel>\n                                    <Select\n                                        labelId=\"selectedState\"\n                                        id=\"selectedState\"\n                                        value={selectedState}\n                                        onChange={handleSelectedStateChange}\n                                        label=\"State\"\n                                    >\n                                        <MenuItem key=\"All\" value=\"All\">\n                                            All\n                                        </MenuItem>\n                                        {stateArray.map(state => (\n                                            <MenuItem key={state} value={state}>\n                                                {state}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                        </Grid>\n                        <h2>Show</h2>\n                        <Grid item xs={12}>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.cases}\n                                        onChange={handleShownChange}\n                                        name=\"cases\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Cumulative Cases\"\n                            />\n                            <br />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.casesDailyChange}\n                                        onChange={handleShownChange}\n                                        name=\"casesDailyChange\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Cases Daily Change\"\n                            />\n                            <br />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.deaths}\n                                        onChange={handleShownChange}\n                                        name=\"deaths\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Cumulative Deaths\"\n                            />\n                            <br />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={shown.deathsDailyChange}\n                                        onChange={handleShownChange}\n                                        name=\"deathsDailyChange\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Deaths Daily Change\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} sm={10}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12} sm={12}>\n                                <ResponsiveContainer width=\"100%\" aspect={15.0 / 8.0}>\n                                    <BarChart\n                                        width={500}\n                                        height={300}\n                                        data={lineChartRows}\n                                        margin={{\n                                            top: 20, right: 30, left: 20, bottom: 5,\n                                        }}\n                                    >\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                        <XAxis\n                                            dataKey=\"dateUnix\"\n                                            domain={[\"auto\", \"auto\"]}\n                                            name=\"Date\"\n                                            tickFormatter={dateUnix =>\n                                                moment.unix(dateUnix).format(\"YYYY-MM-DD\")\n                                            }\n                                            type=\"number\"\n                                        />\n                                        <YAxis />\n                                        <Tooltip />\n                                        <Legend\n                                            layout=\"horizontal\"\n                                            verticalAlign=\"top\"\n                                            align=\"center\"\n                                        />\n                                        {shown.cases && (\n                                            <Bar\n                                                name=\"Cumulative Cases\"\n                                                type=\"monotone\"\n                                                dataKey=\"cases\"\n                                                fill=\"#f80\"\n                                                stackId=\"1\"\n                                            />\n                                        )}\n                                        {shown.casesDailyChange && (\n                                            <Bar\n                                                name=\"Cases Daily Change\"\n                                                type=\"monotone\"\n                                                dataKey=\"casesDailyChange\"\n                                                fill=\"#d6a\"\n                                                stackId=\"1\"\n                                            />\n                                        )}\n                                        {shown.deaths && (\n                                            <Bar\n                                                name=\"Cumulative Deaths\"\n                                                type=\"monotone\"\n                                                dataKey=\"deaths\"\n                                                fill=\"#e33\"\n                                                stackId=\"1\"\n                                            />\n                                        )}\n                                        {shown.deathsDailyChange && (\n                                            <Bar\n                                                name=\"Deaths Daily Change\"\n                                                type=\"monotone\"\n                                                dataKey=\"deathsDailyChange\"\n                                                fill=\"#a4a\"\n                                                stackId=\"1\"\n                                            />\n                                        )}\n                                    </BarChart>\n                                </ResponsiveContainer>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        </Page>\n    );\n};\n\nexport default DailyChanges;\n","import React, { useEffect } from \"react\";\nimport { Route, Router, Switch, Redirect } from \"react-router-dom\";\n\nimport Home from \"./components/Home\";\nimport ByCountry from \"./components/ByCountry\";\nimport ByState from \"./components/ByState\";\nimport Projections from \"./components/Projections\";\nimport DailyChanges from \"./components/DailyChanges\";\n\nimport { createBrowserHistory } from \"history\"\nimport ReactGA from 'react-ga'\n\nconst history = createBrowserHistory();\n// track in google analytics\nhistory.listen(location => {\n\tReactGA.set({ page: location.pathname })\n\tReactGA.pageview(location.pathname)\n})\n\nexport default props => {\n\tuseEffect(() => {\n\t\tReactGA.pageview(window.location.pathname)\n\t});\n\treturn (\n\t\t<Router history={history}>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t<Redirect to=\"/coronavirus\" />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path=\"/coronavirus/\" component={Home} />\n\t\t\t\t<Route exact path=\"/coronavirus/by-country\" component={ByCountry} />\n\t\t\t\t<Route exact path=\"/coronavirus/by-state\" component={ByState} />\n\t\t\t\t<Route exact path=\"/coronavirus/projections\" component={Projections} />\n\t\t\t\t<Route exact path=\"/coronavirus/daily-changes\" component={DailyChanges} />\n\t\t\t</Switch>\n\t\t</Router>\n\t)\n}","import { useState } from \"react\";\nimport createUseContext from \"constate\"; // State Context Object Creator\nimport moment from 'moment';\n\n// Step 1: Create a custom hook that contains your state and actions\nfunction useMain() {\n    \n    //----------------------------------------------------------------------------------------------------\n    //Analyze\n    //----------------------------------------------------------------------------------------------------\n\n    const [activeStep, setActiveStep] = useState(0);\n    const scrollToTop = () => {\n        //window.scrollTo(0, 0);\n        setTimeout(() => {\n            window.scrollTo({\n              behavior: 'smooth',\n              top: 0\n            });\n          }, 100);\n    }\n    const pathArray = [\n        '/analyze/business',\n        '/analyze/revenue',\n        '/analyze/service',\n        '/analyze/google',\n        '/analyze/analyzing',\n        '/analyze/result'\n    ];\n    const handleNext = (props) => {\n        props.history.push(pathArray[activeStep + 1]); \n        setActiveStep(activeStep + 1);\n        scrollToTop();\n    };\n    const handleBack = (props) => {\n        props.history.push(pathArray[activeStep - 1]);\n        if (activeStep === 5) {\n            props.history.push(\"/analyze/google\");\n        } else {\n            setActiveStep(activeStep - 1);\n        }\n        scrollToTop();\n    };\n    const [loading] = useState(false);\n\n    //----------------------------------------------------------------------------------------------------\n    //Business\n    //----------------------------------------------------------------------------------------------------\n\n    const [url, setUrl] = useState('');\n    const handleUrlChange = (event) => setUrl(event.target.value);\n    const [urlInvalid, setUrlInvalid] = useState(false);\n    const handleUrlBlur = () => {\n        if (url) {\n            var re = /^((https?|ftp|smtp):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\n            let isValidUrl = re.test(String(url).toLowerCase());\n            setUrlInvalid(!isValidUrl);\n        }\n    };\n\n    const [industry, setIndustry] = useState('');\n    const handleIndustryChange = (selection) => setIndustry(selection);\n    \n    const [businessType, setBusinessType] = useState('');\n    const handleBusinessTypeChange = (event) => setBusinessType(event.target.value);\n\n    const [businessSeasonality, setBusinessSeasonality] = useState('');\n    const handleBusinessSeasonalityChange = (event) => setBusinessSeasonality(event.target.value);\n\n    const [contactName, setContactName] = useState('');\n    const handleContactNameChange = (event) => setContactName(event.target.value);\n\n    const [contactEmail, setContactEmail] = useState('');\n    const handleContactEmailChange = (event) => setContactEmail(event.target.value);\n    const [contactEmailInvalid, setContactEmailInvalid] = useState(false);\n    const handleContactEmailBlur = () => {\n        if (contactEmail) {\n            //make sure email is valid\n            let re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            let isValidContactEmail = re.test(String(contactEmail).toLowerCase());\n            setContactEmailInvalid(!isValidContactEmail);\n        }\n    };\n\n    //----------------------------------------------------------------------------------------------------\n    //Revenue\n    //----------------------------------------------------------------------------------------------------\n\n    const [revenueDialog, setRevenueDialog] = useState(false);\n    const closeRevenueDialog = (event) => {\n        setRevenueDialog(false);\n    }\n\n    const [annualRevenue, setAnnualRevenue] = useState('');\n    const handleAnnualRevenueChange = (event) => setAnnualRevenue(event.target.value);\n    const [annualRevenueInvalid, setAnnualRevenueInvalid] = useState(false);\n    const handleAnnualRevenueBlur = () => {\n        if (annualRevenue) {\n            let trimmedAnnualRevenue = annualRevenue.replace(/[,]+/g, '').trim();\n            let parsedAnnualRevenue = parseInt(trimmedAnnualRevenue);\n            if (!isNaN(parsedAnnualRevenue)) {\n                setAnnualRevenue(parsedAnnualRevenue)\n            }\n            setAnnualRevenueInvalid(!Number.isInteger(parsedAnnualRevenue));\n        }\n    };\n\n    const handleAddProduct = async () => {\n        await setCurrentProductName('');\n        await setCurrentProductPercentage(0);\n        await setCurrentProductRevenuePerTransaction('');\n        await setCurrentProductProfitMargin('');\n        await setCurrentProductQuantitySold('');\n        await setCurrentProductCustomerType('');\n        await setCurrentProductPurchaseTimes('');\n        await setCurrentProductPurchaseInterval('');\n        await setCurrentProductIndex(-1);\n        openRevenueDialog();\n    };\n    const handleDeleteProduct = (idx) => () => {\n        setProductArray(productArray.filter((s, sidx) => idx !== sidx));\n    };\n    const handleEditProduct = (idx) => () => {\n        let currentProduct = productArray[idx];\n        setCurrentProductName(currentProduct.name);\n        setCurrentProductPercentage(currentProduct.percentage);\n        setCurrentProductRevenuePerTransaction(currentProduct.revenuePerTransaction);\n        setCurrentProductProfitMargin(currentProduct.profitMargin);\n        setCurrentProductQuantitySold(currentProduct.quantitySold);\n        setCurrentProductCustomerType(currentProduct.customerType);\n        setCurrentProductPurchaseTimes(currentProduct.purchaseTimes);\n        setCurrentProductPurchaseInterval(currentProduct.purchaseInterval);\n        setCurrentProductIndex(idx);\n        openRevenueDialog();\n    };\n    const [productArray, setProductArray] = useState([]);\n\n    const [currentProductIndex, setCurrentProductIndex] = useState(-1);\n    const openRevenueDialog = (event) => {\n        setRevenueDialog(true);\n    }\n    \n    //----------------------------------------------------------------------------------------------------\n    //Revenue Dialog\n    //----------------------------------------------------------------------------------------------------\n\n    const handleProductSubmit = (event) => {\n        let newProduct = {\n            name: currentProductName,\n            percentage: currentProductPercentage,\n            revenuePerTransaction: currentProductRevenuePerTransaction,\n            profitMargin: currentProductProfitMargin,\n            quantitySold: currentProductQuantitySold,\n            customerType: currentProductCustomerType,\n            purchaseTimes: currentProductPurchaseTimes,\n            purchaseInterval: currentProductPurchaseInterval\n        }\n        if (currentProductIndex < 0) {   //new\n            setProductArray(productArray.concat([newProduct]));\n        } else {\n            let newProductArray = productArray;\n            newProductArray[currentProductIndex] = newProduct;\n            setProductArray(newProductArray);\n        }\n        closeRevenueDialog();\n    };\n    \n    const [currentProductName, setCurrentProductName] = useState('');\n    const handleCurrentProductNameChange = (event) => setCurrentProductName(event.target.value);\n\n    const [currentProductPercentage, setCurrentProductPercentage] = useState(0);\n    const handleCurrentProductPercentageChange = (event, value) => setCurrentProductPercentage(value);\n\n    const [currentProductRevenuePerTransaction, setCurrentProductRevenuePerTransaction] = useState('');\n    const handleCurrentProductRevenuePerTransactionChange = (event) => setCurrentProductRevenuePerTransaction(event.target.value);\n    const [currentProductRevenuePerTransactionInvalid, setCurrentProductRevenuePerTransactionInvalid] = useState(false);\n    const handleCurrentProductRevenuePerTransactionBlur = () => {\n        if (currentProductRevenuePerTransaction) {\n            let trimmedRevenuePerTransaction = currentProductRevenuePerTransaction.replace(/[,]+/g, '').trim();\n            let parsedRevenuePerTransaction = parseInt(trimmedRevenuePerTransaction);\n            if (!isNaN(parsedRevenuePerTransaction)) {\n                setCurrentProductRevenuePerTransaction(parsedRevenuePerTransaction);\n            }\n            setCurrentProductRevenuePerTransactionInvalid(!Number.isInteger(parsedRevenuePerTransaction));\n        }\n    };\n\n    const [currentProductProfitMargin, setCurrentProductProfitMargin] = useState('');\n    const handleCurrentProductProfitMarginChange = (event) => setCurrentProductProfitMargin(event.target.value);\n    const [currentProductProfitMarginInvalid, setCurrentProductProfitMarginInvalid] = useState(false);\n    const handleCurrentProductProfitMarginBlur = () => {\n        if (currentProductProfitMargin) {\n            let trimmedProfitMargin = currentProductProfitMargin.replace(/[,]+/g, '').trim();\n            let parsedProfitMargin = parseInt(trimmedProfitMargin);\n            if (!isNaN(parsedProfitMargin)) {\n                setCurrentProductProfitMargin(parsedProfitMargin);\n            }\n            setCurrentProductProfitMarginInvalid(!Number.isInteger(parsedProfitMargin));\n        }\n    };\n\n    const [currentProductQuantitySold, setCurrentProductQuantitySold] = useState('');\n    const handleCurrentProductQuantitySoldChange = (event) => setCurrentProductQuantitySold(event.target.value);\n    const [currentProductQuantitySoldInvalid, setCurrentProductQuantitySoldInvalid] = useState(false);\n    const handleCurrentProductQuantitySoldBlur = () => {\n        if (currentProductQuantitySold) {\n            let trimmedQuantitySold = currentProductQuantitySold.replace(/[,]+/g, '').trim();\n            let parsedQuantitySold = parseInt(trimmedQuantitySold);\n            if (!isNaN(parsedQuantitySold)) {\n                setCurrentProductQuantitySold(parsedQuantitySold);\n            }\n            setCurrentProductQuantitySoldInvalid(!Number.isInteger(parsedQuantitySold));\n        }\n    };\n    \n    const [currentProductCustomerType, setCurrentProductCustomerType] = useState('');\n    const handleCurrentProductCustomerTypeChange = (event) => setCurrentProductCustomerType(event.target.value);\n    \n    const [currentProductPurchaseTimes, setCurrentProductPurchaseTimes] = useState('');\n    const handleCurrentProductPurchaseTimesChange = (event) => setCurrentProductPurchaseTimes(event.target.value);\n    \n    const [currentProductPurchaseInterval, setCurrentProductPurchaseInterval] = useState('');\n    const handleCurrentProductPurchaseIntervalChange = (event) => setCurrentProductPurchaseInterval(event.target.value);\n    \n    //----------------------------------------------------------------------------------------------------\n    //Service\n    //----------------------------------------------------------------------------------------------------\n    \n    const [serviceDialog, setServiceDialog] = useState(false);\n    const closeServiceDialog = (event) => {\n        setServiceDialog(false);\n    }\n\n    const handleAddService = async () => {\n        await setCurrentServiceType('');\n        await setCurrentServiceProviderName('');\n        await setCurrentServiceProviderUrl('');\n        await setCurrentServiceBillingPerMonth('');\n        await setCurrentServiceStartedAt('');\n        await setCurrentServiceRating(0);\n        await setCurrentServiceIndex(-1);\n        openServiceDialog();\n    };\n    const handleDeleteService = (idx) => () => {\n        setServiceArray(serviceArray.filter((s, sidx) => idx !== sidx));\n    };\n    const handleEditService = (idx) => () => {\n        let currentService = serviceArray[idx];\n        setCurrentServiceType(currentService.type);\n        setCurrentServiceProviderName(currentService.providerName);\n        setCurrentServiceProviderUrl(currentService.providerUrl);\n        setCurrentServiceBillingPerMonth(currentService.billingPerMonth);\n        setCurrentServiceStartedAt(currentService.startedAt);\n        setCurrentServiceRating(currentService.rating);\n        setCurrentServiceIndex(idx);\n        openServiceDialog();\n    };\n    const [serviceArray, setServiceArray] = useState([]);\n\n    const [currentServiceIndex, setCurrentServiceIndex] = useState(-1);\n    const openServiceDialog = (event) => {\n        setServiceDialog(true);\n    }\n\n    //----------------------------------------------------------------------------------------------------\n    //Service Dialog\n    //----------------------------------------------------------------------------------------------------\n\n    const handleServiceSubmit = (event) => {\n        let newService = {\n            type: currentServiceType,\n            providerName: currentServiceProviderName,\n            providerUrl: currentServiceProviderUrl,\n            billingPerMonth: currentServiceBillingPerMonth,\n            startedAt: currentServiceStartedAt,\n            rating: currentServiceRating\n        }\n        if (currentServiceIndex < 0) {   //new\n            setServiceArray(serviceArray.concat([newService]));\n        } else {\n            let newServiceArray = serviceArray;\n            newServiceArray[currentServiceIndex] = newService;\n            setServiceArray(newServiceArray);\n        }\n        closeServiceDialog();\n    };\n    \n    const [currentServiceType, setCurrentServiceType] = useState('');\n    const handleCurrentServiceTypeChange = (event) => setCurrentServiceType(event.target.value);\n    const [currentServiceProviderName, setCurrentServiceProviderName] = useState('');\n    const handleCurrentServiceProviderNameChange = (event) => setCurrentServiceProviderName(event.target.value);\n\n    const [currentServiceProviderUrl, setCurrentServiceProviderUrl] = useState('');\n    const handleCurrentServiceProviderUrlChange = (event) => setCurrentServiceProviderUrl(event.target.value);\n    const [currentServiceProviderUrlInvalid, setCurrentServiceProviderUrlInvalid] = useState(false);\n    const handleCurrentServiceProviderUrlBlur = () => {\n        if (currentServiceProviderUrl) {\n            var re = /^((https?|ftp|smtp):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;\n            let isValidCurrentServiceProviderUrl = re.test(String(currentServiceProviderUrl).toLowerCase());\n            setCurrentServiceProviderUrlInvalid(!isValidCurrentServiceProviderUrl);\n        }\n    };\n\n    const [currentServiceBillingPerMonth, setCurrentServiceBillingPerMonth] = useState('');\n    const handleCurrentServiceBillingPerMonthChange = (event) => setCurrentServiceBillingPerMonth(event.target.value);\n    const [currentServiceBillingPerMonthInvalid, setCurrentServiceBillingPerMonthInvalid] = useState(false);\n    const handleCurrentServiceBillingPerMonthBlur = () => {\n        if (currentServiceBillingPerMonth) {\n            let trimmedRevenuePerTransaction = currentServiceBillingPerMonth.replace(/[,]+/g, '').trim();\n            let parsedRevenuePerTransaction = parseInt(trimmedRevenuePerTransaction);\n            if (!isNaN(parsedRevenuePerTransaction)) {\n                setCurrentServiceBillingPerMonth(parsedRevenuePerTransaction);\n            }\n            setCurrentServiceBillingPerMonthInvalid(!Number.isInteger(parsedRevenuePerTransaction));\n        }\n    };\n    \n    const [currentServiceStartedAt, setCurrentServiceStartedAt] = useState('');\n    const handleCurrentServiceStartedAtChange = (event) => setCurrentServiceStartedAt(event.target.value);\n    const [currentServiceStartedAtInvalid, setCurrentServiceStartedAtInvalid] = useState(false);\n    const handleCurrentServiceStartedAtBlur = () => {\n        if (currentServiceStartedAt) {\n            let currentServiceStartedAtMoment = moment(currentServiceStartedAt);\n            setCurrentServiceStartedAtInvalid(!currentServiceStartedAtMoment.isValid());\n        }\n    };\n    \n    const [currentServiceRating, setCurrentServiceRating] = useState('');\n    const handleCurrentServiceRatingChange = (event, value) => setCurrentServiceRating(value);\n\n    //----------------------------------------------------------------------------------------------------\n    //Google Analytics\n    //----------------------------------------------------------------------------------------------------\n\n    const [timeline, setTimeline] = useState({});\n    const handleTimelineChange = (inTimeline) => {\n        setTimeline(inTimeline);\n    }\n\n    return { \n        //Analyze\n        activeStep, \n        setActiveStep,\n\t\thandleNext, \n        handleBack,\n        loading,\n\n        //Business\n        url, \n\t\thandleUrlChange, \n\t\turlInvalid, \n        handleUrlBlur,\n\n        industry,\n        handleIndustryChange,\n\n        businessType,\n        handleBusinessTypeChange,\n\n        businessSeasonality,\n        handleBusinessSeasonalityChange,\n\n        contactName,\n        handleContactNameChange,\n\n        contactEmail,\n        handleContactEmailChange,\n        contactEmailInvalid,\n        handleContactEmailBlur,\n        \n        //Revenue\n        revenueDialog,\n        closeRevenueDialog,\n\n        annualRevenue,\n        handleAnnualRevenueChange,\n        annualRevenueInvalid,\n        handleAnnualRevenueBlur,\n\n        handleAddProduct,\n        handleDeleteProduct,\n        handleEditProduct,\n        productArray,\n\n        //Revenue Dialog\n        currentProductIndex,\n        \n        handleProductSubmit,\n\t\t\n\t\tcurrentProductName,\n\t\thandleCurrentProductNameChange,\n\n\t\tcurrentProductPercentage,\n\t\thandleCurrentProductPercentageChange,\n\n\t\tcurrentProductRevenuePerTransaction,\n\t\thandleCurrentProductRevenuePerTransactionChange,\n\t\tcurrentProductRevenuePerTransactionInvalid,\n        handleCurrentProductRevenuePerTransactionBlur,\n        \n        currentProductProfitMargin,\n\t\thandleCurrentProductProfitMarginChange,\n\t\tcurrentProductProfitMarginInvalid,\n        handleCurrentProductProfitMarginBlur,\n        \n        currentProductQuantitySold,\n\t\thandleCurrentProductQuantitySoldChange,\n\t\tcurrentProductQuantitySoldInvalid,\n\t\thandleCurrentProductQuantitySoldBlur,\n\t\t\n\t\tcurrentProductCustomerType,\n\t\thandleCurrentProductCustomerTypeChange,\n\t\t\n\t\tcurrentProductPurchaseTimes,\n\t\thandleCurrentProductPurchaseTimesChange,\n\t\t\n\t\tcurrentProductPurchaseInterval,\n\t\thandleCurrentProductPurchaseIntervalChange,\n\n        //Service\n        serviceDialog,\n        closeServiceDialog,\n\n        handleAddService,\n        handleDeleteService,\n        handleEditService,\n        serviceArray,\n\n        //Service Dialog\n        currentServiceIndex,\n        \n        handleServiceSubmit,\n\t\t\n\t\tcurrentServiceType,\n        handleCurrentServiceTypeChange,\n        \n\t\tcurrentServiceProviderName,\n        handleCurrentServiceProviderNameChange,\n        \n        currentServiceProviderUrl,\n        handleCurrentServiceProviderUrlChange,\n        currentServiceProviderUrlInvalid,\n        handleCurrentServiceProviderUrlBlur,\n\n\t\tcurrentServiceBillingPerMonth,\n\t\thandleCurrentServiceBillingPerMonthChange,\n\t\tcurrentServiceBillingPerMonthInvalid,\n        handleCurrentServiceBillingPerMonthBlur,\n\t\t\n\t\tcurrentServiceStartedAt,\n        handleCurrentServiceStartedAtChange,\n        currentServiceStartedAtInvalid, \n        handleCurrentServiceStartedAtBlur,\n\t\t\n\t\tcurrentServiceRating,\n\t\thandleCurrentServiceRatingChange,\n\n        //Google API\n        timeline,\n        handleTimelineChange,\n    };\n}\n\n// Step 2: Declare your context state object to share the state with other components\nexport const useMainContext = createUseContext(useMain);","import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport './App.css';\nimport Routes from './routes'\nimport { blue, indigo } from '@material-ui/core/colors';\nimport { useMainContext } from \"./components/MainContext\";\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tsecondary: {\n\t\t\tmain: blue[900]\n\t\t},\n\t\tprimary: {\n\t\t\tmain: indigo[700]\n\t\t}\n\t},\n\ttypography: {\n\t\tuseNextVariants: true,\n\t\t// Use the system font instead of the default Roboto font.\n\t\tfontFamily: [\n\t\t\t'\"Lato\"',\n\t\t\t'sans-serif'\n\t\t].join(',')\n\t}\n});\n\nexport default function App() {\n\treturn (\n\t\t<useMainContext.Provider>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<Routes />\n\t\t\t</ThemeProvider>\n\t\t</useMainContext.Provider>\n\t);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactGA.initialize('UA-144299383-1')\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}